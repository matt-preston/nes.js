
function initOpcodes()
{
    // Opcode instruction sizes (in bytes)
    var _opcodeSize =
    [
        /*0x00*/ 1,2,0,0,0,2,2,0,1,2,1,0,0,3,3,0,
        /*0x10*/ 2,2,0,0,0,2,2,0,1,3,0,0,0,3,3,0,
        /*0x20*/ 3,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
        /*0x30*/ 2,2,0,0,0,2,2,0,1,3,0,0,0,3,3,0,
        /*0x50*/ 2,2,0,0,0,2,2,0,1,3,0,0,0,3,3,0,
        /*0x40*/ 1,2,0,0,0,2,2,0,1,2,1,0,3,3,3,0,
        /*0x60*/ 1,2,0,0,0,2,2,0,1,2,1,0,3,3,3,0,
        /*0x70*/ 2,2,0,0,0,2,2,0,1,3,0,0,0,3,3,0,
        /*0x80*/ 0,2,0,0,2,2,2,0,1,0,1,0,3,3,3,0,
        /*0x90*/ 2,2,0,0,2,2,2,0,1,3,1,0,0,3,0,0,
        /*0xA0*/ 2,2,2,0,2,2,2,0,1,2,1,0,3,3,3,0,
        /*0xB0*/ 2,2,0,0,2,2,2,0,1,3,1,0,3,3,3,0,
        /*0xC0*/ 2,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
        /*0xD0*/ 2,2,0,0,0,2,2,0,1,3,0,0,0,3,3,0,
        /*0xE0*/ 2,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
        /*0xF0*/ 2,2,0,0,0,2,2,0,1,3,0,0,0,3,3,0
    ];

    //  Addressing modes
    //  0 = Implied\Accumulator\Immediate\Branch\NULL
    //  1 = (Indirect,X)
    //  2 = Zero Page
    //  3 = Absolute
    //  4 = (Indirect),Y
    //  5 = Zero Page,X
    //  6 = Absolute,Y
    //  7 = Absolute,X
    //  8 = Zero Page,Y
    //
    var _addressingMode =
    [
        /*0x00*/ 0,1,0,0,0,2,2,0,0,0,0,0,0,3,3,0,
        /*0x10*/ 0,4,0,0,0,5,5,0,0,6,0,0,0,7,7,0,
        /*0x20*/ 0,1,0,0,2,2,2,0,0,0,0,0,3,3,3,0,
        /*0x30*/ 0,4,0,0,0,5,5,0,0,6,0,0,0,7,7,0,
        /*0x40*/ 0,1,0,0,0,2,2,0,0,0,0,0,0,3,3,0,
        /*0x50*/ 0,4,0,0,0,5,5,0,0,6,0,0,0,7,7,0,
        /*0x60*/ 0,1,0,0,0,2,2,0,0,0,0,0,3,3,3,0,
        /*0x70*/ 0,4,0,0,0,5,5,0,0,6,0,0,0,7,7,0,
        /*0x80*/ 0,1,0,0,2,2,2,0,0,0,0,0,3,3,3,0,
        /*0x90*/ 0,4,0,0,5,5,8,0,0,6,0,0,0,7,0,0,
        /*0xA0*/ 0,1,0,0,2,2,2,0,0,0,0,0,3,3,3,0,
        /*0xB0*/ 0,4,0,0,5,5,8,0,0,6,0,0,7,7,6,0,
        /*0xC0*/ 0,1,0,0,2,2,2,0,0,0,0,0,3,3,3,0,
        /*0xD0*/ 0,4,0,0,0,5,5,0,0,6,0,0,0,7,7,0,
        /*0xE0*/ 0,1,0,0,2,2,2,0,0,0,0,0,3,3,3,0,
        /*0xF0*/ 0,4,0,0,0,5,5,0,0,6,0,0,0,7,7,0
    ];

    //  The number of cycles for each instruction
    var _cycleCount =
    [
        /*0x00*/ 7,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,
        /*0x10*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,
        /*0x20*/ 6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,
        /*0x30*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,
        /*0x40*/ 6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,
        /*0x50*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,
        /*0x60*/ 6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,
        /*0x70*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,
        /*0x80*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,
        /*0x90*/ 2,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,
        /*0xA0*/ 2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,
        /*0xB0*/ 2,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,
        /*0xC0*/ 2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,
        /*0xD0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,
        /*0xE0*/ 2,6,3,8,3,3,5,5,2,2,2,2,4,4,6,6,
        /*0xF0*/ 2,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7
    ];

    var _result = {};

    _result.opcodeSize     = _opcodeSize;
    _result.addressingMode = _addressingMode;
    _result.cycleCount     = _cycleCount;

    return _result;
}